plugins {
  id 'fabric-loom' version '1.3.8'
	// id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	mavenLocal()
		maven {
			name 'Xander Maven'
			url 'https://maven.isxander.dev/releases'
		}
	maven { url 'https://maven.blamejared.com' }
	maven {
		name = 'Sponge / Mixin'
		url = 'https://repo.spongepowered.org/repository/maven-public/'
	}
	maven { url = "https://libraries.minecraft.net/" }
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://maven.shedaniel.me/"  }
	maven { url = "https://maven.wispforest.io" } // TOP
	maven { url = "https://www.cursemaven.com" }
	maven { url = "https://maven.ladysnake.org/releases" }
	maven { url = "https://mvn.devos.one/releases/" }
	maven { url = "https://mvn.devos.one/snapshots/" }
	maven { url = "https://maven.parchmentmc.org" }
	maven { url = "https://maven.vram.io" }
	maven { url = "https://jitpack.io" }
	maven {
		// location of the maven that hosts JEI files
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}
	maven {
		name = "CurseMaven"
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		url "https://cursemaven.com"
	}
	maven {
		name "SquidDev"
		url "https://squiddev.cc/maven"
	}
	maven { url "https://maven.terraformersmc.com/releases" }
	maven {
		name = "Modmuss50"
		url = "https://maven.modmuss50.me/"
	}
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
		//mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	dependencies {
		modImplementation("vazkii.botania:Botania:1.20.1-447-FABRIC")

		modImplementation("com.terraformersmc:modmenu:7.2.2")

		modImplementation(include("maven.modrinth:midnightlib:${project.midnightlib_version}"))

		modImplementation 'teamreborn:energy:3.0.0'

//		modRuntimeOnly 'RebornCore:RebornCore-1.20.1:5.8.7'
//		modRuntimeOnly 'TechReborn:TechReborn-1.20.1:5.8.7'

		modRuntimeOnly 'curse.maven:reborncore-237903:4708961'

		modRuntimeOnly 'curse.maven:techreborn-233564:4708962'
	}
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
